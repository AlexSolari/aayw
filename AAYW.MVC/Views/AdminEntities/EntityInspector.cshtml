@using AAYW.Core.Dependecies;
@using AAYW.Core.Reflector;
@model dynamic
@* Model will be "List" of entities ( actuall type is "dynamic" ), type is unknow at compile time and will be resolved in runtime*@
@{
    ViewBag.Title = Html.Text("EntityInspector");
    Layout = Layouts.Admin;
    var page = (int)ViewData["Page"];
    var type = (string)ViewData["Type"];

    var reflector = Resolver.GetInstance<IReflector>();
}

<div class="admin-inspector mui-panel">
    <h1>@Html.Text("EntityInspector")</h1>
    <div class="paging">
        @if (page != 0)
        {
            <a href="@(Url.RouteUrl("EntityInspector", new { type = type, page = page - 1 }))">&larr;</a>
        }
        <span class="page">@page</span>
        <a href="@(Url.RouteUrl("EntityInspector", new { type = type, page = page + 1 }))">&rarr;</a>
    </div>
    <div>@Html.Text("EntityInspectorHint")</div>
    @Html.ValidationSummary()
    @if (Model != null && Model.Count > 0)
    {
        <div class="table-wrapper">
            <table class="mui-table mui-table--bordered">
                <thead>
                    <tr>
                        @foreach (var prop in reflector.Reflect(Model[0].GetType()).Properties)
                        {
                            <th>@prop.Name</th>
                        }
                    </tr>
                </thead>
                <tbody>

                    @foreach (var item in Model)
                    {
                        <tr class="admin-inspector-edit" id="@item.Id" data-target="@item.Id" data-type="@item.GetType().Name">
                            @foreach (var prop in reflector.Reflect(item.GetType()).Properties)
                            {
                                <td id="@(item.Id + "_" + prop.Name)">@prop.GetValue(item)</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="mui--appbar-height mui--appbar-line-height no-results">
            @Html.Text("NoResults")
        </div>
    }
</div>


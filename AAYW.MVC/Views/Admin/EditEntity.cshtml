@model dynamic
@* Model will be "Entity" ( actuall type is "dynamic" ), type is unknow at compile time and will be resolved in runtime*@
<div class="admin-edit-entity">
    <h1>@Html.Text("EntityEditor")</h1>
    @using (Html.BeginForm("SaveEntity", "Admin", FormMethod.Post))
    {
        <input name="type" type="hidden" value="@Model.GetType().Name"/>
        foreach (var prop in Model.GetType().GetProperties())
        {
            <div class="row">
                <label for="edit-@(Model.Id + "_" + prop.Name)">@prop.Name (@prop.PropertyType.Name)</label>
                <div class="control mui-textfield">
                    <input
                           id="edit-@(Model.Id + "_" + prop.Name)" 
                           name="modelData[@(prop.Name + "@" + prop.PropertyType.FullName)]" 
                           type="@ResolveInputType(prop)"
                           value="@((prop.PropertyType == typeof(DateTime)) ? prop.GetValue(Model).ToString("yyyy-MM-ddTHH:mm:ss") : prop.GetValue(Model))"
                           placeholder="@prop.PropertyType.Name" 
                           data-locked="@(prop.GetCustomAttributes(typeof(AAYW.Core.Annotations.InspectorLockAttribute), false).Length > 0)" />
                </div>
            </div>
        }
        <div class="row">
            <div class="control">
                @Html.Button(Html.Text("Save"), ButtonType.Raised, cssClass: "submit" )
            </div>
        </div>
    }
</div>
@functions  {
    string ResolveInputType(System.Reflection.PropertyInfo info)
    {
        var type = info.PropertyType;
        if ( type == typeof(int) || 
             type == typeof(float) || 
             type == typeof(double) || 
             type == typeof(decimal)
             )
        {
        
            return "number";
        }
        else if (type == typeof(DateTime))
        {
            return "datetime-local";
        }
        else{
            return "text";
        }
    }
}
